//Creating class linked_list and bag and implementing functions on them.
//Note that for class linked_list and bag, you need to also include destructor, copy constructor, move constructor, left ref operator=, and right ref operator=

#include <iostream>
#include <stdlib.h>
#include <string>
using namespace std;



template <class T> class ThreeD {
public:
	T ht;
	T wid;
	T dep;
	ThreeD() { ht = wid = dep = 0; }
	ThreeD(T i) { ht = wid = dep = i; }
	ThreeD(T a, T b, T c) { ht = a; wid = b; dep = c; }
	template <class U> friend ostream & operator<<(ostream & stream, const ThreeD<U> & T);
	
	
};

template <class U> ostream & operator<<(ostream & stream, const ThreeD<U> & T)
{
	stream << "( " << T.ht << ", " << T.wid << ", " << T.dep << " ) ";
	return stream;
}

template <class T> class node {
public:
	T value;
	node<T> * next;
	node<T> * previous;
	node<T>() { next = previous = nullptr; }
	node<T>(T v) { value = v; next = previous = nullptr; }


};
template <class T> class linked_list { //doubly linked list
public:
	node<T> * head;
	node<T> * tail;
	linked_list() { head = tail = nullptr; }
	linked_list(const linked_list<T> & L)
	{
		head = tail = nullptr;
		node<T> *p1 = L.head;
		while (p1 != nullptr)
		{
			node<T> * p2 = new node<T>(p1->value);
			if (tail == nullptr)
			{
				tail = head = p2;
			}
			else
			{
				tail->next = p2;
				tail = p2;
			}
			p1 = p1->next;
		}
	}
	~linked_list<T>()
	{
		while (head != nullptr) {
			node<T> * p = head->next;
			delete head;
			head = p;
		}
		tail = nullptr;
		
	}
	void operator=(const linked_list<T> &L)
	{
		while (head != nullptr) 
		{
			node<T> * p = head->next;
			delete head;
			head = p;
		}
		head = tail = nullptr;
		node<T> *p1 = L.head;
		while (p1 != nullptr)
		{
			node<T> * p2 = new node<T>(p1->value);
			if (tail == nullptr)
			{
				tail = head = p2;
			}
			else
			{
				tail->next = p2;
				tail = p2;
			}
			p1 = p1->next;
		}
	}
	void push_front(T x);
	void push_back(T x);
	void pop_front();
	void pop_back();
	template <class U> friend ostream & operator<<(ostream & stream, const linked_list<U> & L);
};

template<class T> void linked_list<T>:: push_front(T x)
{
	node<T> * p = new node<T>(x);
	p->next = head;
	if (head == nullptr)
	{
		head = tail = p;
	}
	else
	{
		head->previous = p;
		head = p;
	}
}

template<class T> void linked_list<T>::push_back(T x)
{
	node<T> * p = new node<T>(x);
	p->previous = tail;
	if (tail == nullptr)
	{
		head = tail = p;
	}
	else
	{
		tail->next = p;
		tail = p;
	}
}

template<class T> void linked_list<T>::pop_front()
{
	if (head != nullptr)
	{
		if (head == tail)
			tail = nullptr;
		else
			head->next->previous = nullptr;
		node<T> * p = head;
		head = head->next;
		delete p;
	}
}

template<class T> void linked_list<T>::pop_back()
{
	if (tail != nullptr)
	{
		if (head == tail)
			head = nullptr;
		else
			tail->previous->next = nullptr;
		node<T> * p = tail;
		tail = tail->previous;
		delete p;
	}
}

template <class U> ostream & operator<<(ostream & stream, const linked_list<U> & L)
{
	node<U> * p = L.head;
	while (p != nullptr)
	{
		stream << p->value << " ";
		p = p->next;
	}
	return stream;
}
template <class X>
class item {
public:
	X value;
	item<X> *next;
	item<X> *previous;
	item<X>(X v) { value = v; next = nullptr; previous = nullptr; }
};

template <class X>
class bag {
public:
	item<X> *last;
	item<X> *first;
	int num_items;
	int size() { return num_items; }
	bag() { last = nullptr; first = nullptr; num_items = 0; } //default constructor for bag class
	bag(const bag<X> &B)
	{
		num_items = B.num_items;
		first = last = nullptr;
		item<X> *p1 = B.first;
		while (p1 != nullptr)
		{
			item<X> * p2 = new item<T>(p1->value);
			p2->previous = last;
			if (last == nullptr)
			{
				first = last = p2;
			}
			else
			{
				last->next = p2;
				last = p2;
			}
			p1 = p1->next;
		}
	}
	~bag()
	{
		while (first != nullptr) {
			item<X> * p = first->next;
			delete first;
			first = p;
		}
		last = nullptr;
	}
	void operator=(const bag<X> &B)
	{
		while (first != nullptr) {
			item<X> * p = first->next;
			delete first;
			first = p;
		}
		num_items = B.num_items;
		last = nullptr;
		item<X> *p1 = B.first;
		while (p1 != nullptr)
		{
			item<X> * p2 = new item<T>(p1->value);
			p2->previous = last;
			if (last == nullptr)
			{
				first = last = p2;
			}
			else
			{
				last->next = p2;
				last = p2;
			}
			p1 = p1->next;
		}
	}
	void push_back(X v);  //insert an item with value v to the back of the bag
	void push_front(X v); //insert an item with value v to the front of the bag
	void pop_back(); //delete the last item in the bag
	void pop_front(); //delete the first item in the bag
	X &operator[](int i); //Access bag item with index. 
	X front() {  //it returns the value of the first item in the bag.
				 //In real applicaitons, we need to check if the bag is empty.  We are skipping this here.
		//if(first !=nullptr)
		return first->value;
	}
	X back() { //it returns the value of the last item in the bag
			   //In real applicaitons, we need to check if the bag is empty.  We are skipping this here.
		//if(last !=nullptr)
		return last->value;
	}
	void clear(); //Delete all items in the bag
	item<X> * find(X x);//find returns address of item with value equal to x or nullptr if match not found
	void erase(item<X> * p); //erase the item pointed by p;
	void erase(int i); //erase the item with index equal to i;
	template <class U> friend ostream & operator<<(ostream & stream,const bag<U> & B);
	template <class Z> friend bool operator==(const linked_list<Z> & L1, const linked_list<Z> & L2);
	template <class U> friend bool operator==(const ThreeD<U> & T1, const ThreeD<U> & T2);
	
					   
};

template <class U> bool operator==(const ThreeD<U> & T1, const ThreeD<U> & T2)
{
	if (T1.ht == T2.ht && T1.dep == T2.dep && T1.wid == T2.wid)
		return true;
	else
		return false;
}

template <class Z> bool operator==(const linked_list<Z> & L1, const linked_list<Z> & L2)
{
	node<Z> * p1 = L1.head;
	node<Z> * p2 = L2.head;
	while (p1 != nullptr && p2 != nullptr)
	{
		if (p1->value == p2->value)
		{
			p1 = p1->next;
			p2 = p2->next;
		}
		else
			return false;
	}
	if (p1 == nullptr && p2 == nullptr)
		return true;
	else
		return false;
}

template <class X> void bag<X>::erase(int i)
{
	item<X> * p = first;
	for (int j = 0; j < i && p != nullptr; j++, p = p->next);
	erase(p);
}

template <class X> void bag<X>::erase(item<X> * p)
{
	if (p != nullptr)
	{
		if (p == first)
			pop_front();
		else if (p == last)
			pop_back();
		else
		{
			p->previous->next = p->next;
			p->next->previous = p->previous;
			delete p;
		}
		num_items--;
	}
}
template <class U> ostream & operator<<(ostream & stream, const bag<U> & B)
{
	item<U> * p = B.first;
	while (p != nullptr)
	{
		stream << p->value << " ";
		p = p->next;
	}
	return stream;
}

template <class X> item<X> * bag<X>::find(X x)
{
	item<X> *p = first;
	while (p != nullptr)
	{
		if (p->value == x)
			return p;
		p = p->next;
	}
	return nullptr;
}

template <class X> void bag<X>::push_back(X v)
{
	item<X> * p = new item<X>(v);
	p->previous = last;
	if (last == nullptr)
		first = last = p;
	else
	{
		last->next = p;
		last = p;
	}
	num_items++;
}

template <class X> void bag<X>::push_front(X v)
{
	item<X> * p = new item<X>(v);
	p->next = first;
	if (first == nullptr)
	{
		first = last = p;
	}
	else
	{
		first->previous = p;
		first = p;
	}
	num_items++;
}

template <class X> void bag<X>::pop_front()
{
	if (first != nullptr)
	{
		if (first == last)
			last = nullptr;
		else
			first->next->previous = nullptr;
		item<X> * p = first;
		first = first->next;
		delete p;
		num_items--;
	}
}

template <class X> void bag<X>::pop_back()
{
	if (last != nullptr)
	{
		if (first == last)
			first = nullptr;
		else
			last->previous->next = nullptr;
		item<X> * p = last;
		last = last->previous;
		delete p;
		num_items--;
	}
}

template <class X> X & bag<X>::operator[](int i)
{
	item<X> * p = first;
	for (int j = 0; (j < i) && (p != nullptr); j++, p = p->next);
	if (p != nullptr)
		return p->value;
}

template <class X> void bag<X>::clear()
{
	item<X> * p = first;
	while (p != nullptr)
	{
		p = p->next;
		pop_front();
	}
	num_items = 0;
}

int main() {
	bag<double> bag_d;
	bag_d.push_back(5.5);
	bag_d.push_back(6.6);
	bag_d.push_front(4.4);
	bag_d.push_front(3.3);
	bag_d.pop_front();
	bag_d.pop_back();
	cout << bag_d << endl;;


	bag<int> bag_i;
	bag_i.push_back(5);
	bag_i.push_back(6);
	bag_i.push_front(4);
	bag_i.push_front(3);
	bag_i.pop_front();
	bag_i.pop_back();
	cout << bag_i << endl;

	ThreeD<int> td3(3), td4(4), td5(5), td6(6), td7(100, 200, 300);
	bag<ThreeD<int>> bag_3D;
	bag_3D.push_back(td5);
	bag_3D.push_back(td6);
	bag_3D.push_front(td4);
	bag_3D.push_front(td3);
	bag_3D.pop_front();
	bag_3D.pop_back();
	cout << bag_3D << endl;;
	cout << bag_3D.front() << bag_3D.back();
	cout << bag_3D[0] << " " << bag_3D[1] << endl;
	bag_3D[1] = td7;
	cout << bag_3D[0] << " " << bag_3D[1] << endl;
	bag_3D.clear();
	cout << bag_3D << endl;;
	cout << bag_3D.size() << endl;


	linked_list<string>ls_1;
	ls_1.push_front("David");
	ls_1.push_front("John");
	ls_1.push_front("Pat");
	ls_1.push_front("Ben");
	ls_1.push_front("Jeff");
	cout << ls_1 << endl;

	linked_list<string>ls_2;
	ls_2.push_front("Wendy");
	ls_2.push_front("Mary");
	ls_2.push_front("Nancy");
	ls_2.push_front("Jennifer");
	cout << ls_2 << endl;

	bag<linked_list<string>> bag_string;

	bag_string.push_back(ls_1);

	bag_string.push_back(ls_2);

	cout << bag_string << endl;
	cout << bag_string[1] << endl;

	ThreeD<double> t10(3.2, 7.4, 8.9), t11(5.6, 7.7, 2.987), t12(4.6, 7.5, 3.1416), t13(55.6, 66.8, 333.45);
	linked_list<ThreeD<double>> LTD1;
	LTD1.push_front(t10);

	LTD1.push_front(t11);
	linked_list<ThreeD<double>> LTD2;
	LTD2.push_front(t13);
	LTD2.push_front(t12);
	LTD2.push_front(t10);
	LTD2.push_front(t11);

	bag<linked_list<ThreeD<double> > > BLTD;
	BLTD.push_back(LTD1);
	BLTD.push_back(LTD2);
	cout << BLTD << endl;

	item<linked_list<ThreeD<double>>> * p2;

	p2 = BLTD.find(LTD1);
	BLTD.erase(p2);
	cout << BLTD << endl;
	BLTD.push_back(LTD1);
	cout << BLTD << endl;
	BLTD.erase(0);
	cout << BLTD << endl;

	getchar();
	getchar();
	return 0;

}